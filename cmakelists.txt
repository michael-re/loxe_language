cmake_minimum_required(VERSION 3.8)
project(loxe)

set(CMAKE_CXX_STANDARD          20)
set(CMAKE_CXX_EXTENSIONS        OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_COMPILE_WARNING_AS_ERROR ON)

# see: https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md
set(msvc_compile_options
        /W4          # all reasonable warnings
        /w14242      # 'identifier': conversion from 'type1' to 'type1', possible loss of data
        /w14254      # 'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data
        /w14263      # 'function': member function does not override any base class virtual member function
        /w14265      # 'classname': class has virtual functions, but destructor is not virtual instances of this class may not be destructed correctly
        /w14287      # 'operator': unsigned/negative constant mismatch
        /we4289      # nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope
        /w14296      # 'operator': expression is always 'boolean_value'
        /w14311      # 'variable': pointer truncation from 'type1' to 'type2'
        /w14545      # expression before comma evaluates to a function which is missing an argument list
        /w14546      # function call before comma missing argument list
        /w14547      # 'operator': operator before comma has no effect; expected operator with side-effect
        /w14549      # 'operator': operator before comma has no effect; did you intend 'operator'?
        /w14555      # expression has no effect; expected expression with side- effect
        /w14619      # pragma warning: there is no warning number 'number'
        /w14640      # Enable warning on thread un-safe static member initialization
        /w14826      # Conversion from 'type1' to 'type_2' is sign-extended. This may cause unexpected runtime behavior.
        /w14905      # wide string literal cast to 'LPSTR'
        /w14906      # string literal cast to 'LPWSTR'
        /w14928      # illegal copy-initialization; more than one user-defined conversion has been implicitly applied
        /permissive- # standards conformance mode for MSVC compiler.
        /WX
)

set(clang_compile_options
        -Wall
        -Wextra                # reasonable and standard
        -Wnon-virtual-dtor     # warn the user if a class with virtual functions has a non-virtual destructor. This helps catch hard to track down memory errors
        -Wold-style-cast       # warn for c-style casts
        -Wcast-align           # warn for potential performance problem casts
        -Wunused               # warn on anything being unused
        -Woverloaded-virtual   # warn if you overload (not override) a virtual function
        -Wpedantic             # warn if non-standard C++ is used
        -Wconversion           # warn on type conversions that may lose data
        -Wsign-conversion      # warn on sign conversions
        -Wnull-dereference     # warn if a null dereference is detected
        -Wdouble-promotion     # warn if float is implicit promoted to double
        -Wformat=2             # warn on security issues around functions that format output (ie printf)
        -Wimplicit-fallthrough # warn on statements that fallthrough without an explicit annotation
        -Werror
)

set(gcc_compile_options
        ${clang_compile_options}
        -Wmisleading-indentation # warn if indentation implies blocks where blocks do not exist
        -Wduplicated-cond        # warn if if / else chain has duplicated conditions
        -Wduplicated-branches    # warn if if / else branches have duplicated code
        -Wlogical-op             # warn about logical operations being used where bitwise were probably wanted
        -Wuseless-cast           # warn if you perform a cast to the same type
)

if(MSVC)
        set(loxe_compile_options ${msvc_compile_options})
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(loxe_compile_options ${clang_compile_options})
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
        set(loxe_compile_options ${gcc_compile_options})
else()
        set(loxe_compile_options "")
        message(AUTHOR_WARNING "no compiler warnings set for '${CMAKE_CXX_COMPILER_ID}' compiler.")
endif()

# include files
set(loxe_include_files
        include/loxe/except.hpp
        include/loxe/expr.hpp
        include/loxe/interpreter.hpp
        include/loxe/lexer.hpp
        include/loxe/parser.hpp
        include/loxe/token.hpp
        include/loxe/tree_walker.hpp
        include/loxe/utility.hpp

        # includes all files in loxe directory
        include/loxe.hpp
)

# source files
set(loxe_source_files
        src/loxe/interpreter.cpp
        src/loxe/lexer.cpp
        src/loxe/parser.cpp
        src/loxe/token.cpp
        src/loxe/tree_walker.cpp

        # entry point into program: `main`
        src/loxe.cpp
)

add_executable(loxe ${loxe_source_files} ${loxe_include_files})
target_include_directories(loxe PRIVATE ${CMAKE_SOURCE_DIR}/include)
target_compile_options(loxe PRIVATE ${loxe_compile_options})
